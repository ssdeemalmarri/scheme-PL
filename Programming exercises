;find the smallest element in a list 
(define (smallest a list)
(cond 
	((Null? list) a)
	((< a (car list)) (smallest a (cdr list)))
	(else (smallest (car list) (cdr list)))
	))

;merge sort assume list1 and list2 are sorted lists

(define (mergesort list1 list2)
(cond 
	((Null? list1) list2)
	((Null? list2)list1)
	((< (car list1) (car list2)) 
		(cons (car list1) (mergesort (cdr list1) list2)))
	(else (cons (car list2) (mergesort list1 (cdr list2))))
	))

 ; find the number of elements in a list

 (define (numOfelm list)
 	(cond
 		((Null? list)0)
 		(else (+ 1 (numOfelm (cdr list))) )
 		))
;Given a non-negative integer n, compute the sum of all integers from 0 to n.
 (define (sum n)
 	(cond 
 		((= n 0)0)
 		(else (+ n (sum (- n 1))))
 		))

 ; sum of elements in a list 

 (define (sumlist list)
 	(cond 
 		((null? list)0)
 		(else (+ (car list) (sumlist (cdr list))))
 		))


;find the longest list 
(define (longest list1 list2 )
(cond 
	((Null? list1) (null? list2) -1)
	((Null? list1) list2)
	((null? list2) list1)
    ((< (numOfelm list1) (numOfelm list2)) (numOfelm list2))
    (else (numOfelm list1))))

; Write a Scheme function that returns the number of zeros in a given simple list of numbers.

(define (numzero list)
(cond 
	((null? list )0)
	((= 0 (car list)) (+ 1 (numzero (cdr list))))
	(else (numzero (cdr list)))
	)
)


;Write a Scheme function that takes two numeric parameters, A and B, and returns A raised to the B power.
(define (power A B)
    (cond
      ((= B 0) 1)
      ((= B 1) A)
      (else (* A (power A (- B 1))))))

; remove the given atom x from the list
(define remv
  (lambda (x ls)
    (cond
      [(null? ls) '()]
      [(eqv? (car ls) x) (remv x (cdr ls))]
      [else (cons (car ls) (remv x (cdr ls)))])))      

;The Fibonacci Sequence
(define (fibbonaci n)
	(cond 
     ((= n 0)0)
     ((= n 1) 1)
     (else (+ (fibbonaci (- n 1) (fibbonaci(- n 2)))))))		


; The Fibonacci Sequence with tail recursion
(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))


;the largest and smallest numbers in the input list.
(DEFINE (max list)
         (COND
                        ((NULL? list) ‘())
                        ((NULL? (CDR list)) (CAR list))
                        ((> (CAR list) (max (CDR list))) (CAR list))
                        (ELSE (max (CDR list)))
         )
      )    
 
      (DEFINE (min list)
         (COND
                        ((NULL? list) ‘())
                        ((NULL? (CDR list)) (CAR list))
                        ((< (CAR list) (min (CDR list))) (CAR list))
                        (ELSE (min (CDR list)))
         )
      )    
 
(DEFINE (minmax  list) (CONS (min list) (CONS (max list) '())))

( define (rem-last list)
	(if (null? (cdr list))
	'()
	(cons (car list) (rem-last (cdr list))))

;Write a Scheme function that takes a list as a parameter and returns a list identical to the parameter list except with the second top-level ele- ment removed. If the given list does not have two elements, the function should return ().


(define (sec list)
    (cond
      ((null? list) '())
      ((null? (cdr list)) '())
      (else (cons (car list) (cddr list)))))	


